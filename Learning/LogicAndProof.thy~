theory LogicAndProof imports Main TypesAndFunctions
begin

(*Exercise 4.1*)
fun set :: "'a tree \<Rightarrow> 'a set" where
"set Tip = {}" |
"set (Node l x r) = (set l) Un {x} Un (set r)"

value "set (Node (Node Tip (3::nat) Tip) 5 (Node (Node (Tip) 10 (Node (Tip) 2 (Tip))) 7 (Tip)))"

fun ord :: "int tree \<Rightarrow> bool" where
"ord Tip = True" |
"ord (Node Tip x Tip) = True" |
"ord (Node Tip x (Node l2 x2 r2)) = (if x > x2 then False else ord (Node l2 x2 r2))" |
"ord (Node (Node l2 x2 r2) x r) = (if x2 \<ge> x then False else ord (Node l2 x2 r2) \<and> ord r)"

fun ins :: "int \<Rightarrow> int tree \<Rightarrow> int tree" where
"ins x Tip = Node Tip x Tip" |
"ins x (Node l y r) = (if x > y then Node l y (ins x r) else
                      (if x = y then Node l y r else Node (ins x l) y r))"

theorem set_ins [simp]: "set (ins x t) = {x} \<union> set t"
  apply(induction t)
  apply(auto)
  done

theorem ord_ins [simp]: "ord t \<Longrightarrow> ord (ins i t)"
  apply(induction t rule: ord.induct)
  apply(auto)
  done
(*End of exercise*)

end
